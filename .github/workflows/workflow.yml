name: Build a single container
on:
  workflow_call:
    secrets:
      AWS_ECR_ACCESS_KEY_ID:
        description: "The AWS access key ID to use for the ECR login (must have permissions to push to the repository you're trying to push to)"
        required: true
      AWS_ECR_SECRET_ACCESS_KEY:
        description: "The AWS secret access key to use for the ECR login (must have permissions to push to the repository you're trying to push to)"
        required: true
      ACTIONS_BUILD_CONTAINER_ECR_ACCESS_KEY_ID:
        description: 'The AWS access key ID to use to grab the container built in [the-iea/github-actions-build-container](https://github.com/the-iea/github-actions-build-container) (Provided as an organisation secret within the IEA)'
        required: true
      ACTIONS_BUILD_CONTAINER_ECR_SECRET_ACCESS_KEY:
        description: 'The AWS secret access key to use to grab the container built in [the-iea/github-actions-build-container](https://github.com/the-iea/github-actions-build-container) (Provided as an organisation secret within the IEA)'
        required: true
    inputs:
      AWS_ECR_REPOSITORY:
        description: 'The AWS ECR repository to push the container to'
        required: true
        type: string
      DOCKERFILE:
        description: 'The Dockerfile to build'
        required: true
        type: string
      BUILD_CONTEXT:
        description: Build context used by the docker builder (. to reference top of Git repo, DOCKERFILE_DIRNAME to reference Dockerfile directory - Either BUILD_CONTEXT or DOCKERFILE or both must be specified)
        required: false
        type: string
        default: DOCKERFILE_DIRNAME
      BUILD_ARGS:
        description: 'The build arguments to pass to the Docker build (Newline separated string of KEY=VAR)'
        required: false
        type: string
        default: ''
      TAG_SUFFIX:
        description: 'The suffix to append to the tag'
        required: false
        type: string
        default: ''
      PLATFORMS:
        description: 'The platforms to build for (comma separated string)'
        required: false
        type: string
        default: 'linux/amd64'
      # ARTIFACTS:
      #   description: 'List of artifacts within the container to upload as build artifacts (comma separated string)'
      #   required: false
      #   type: string
      #   default: ''
      PLATFORM_TO_ARCH_MAP:
        description: 'A JSON object mapping platform to architecture (Generally, you should not need to change this)'
        required: false
        type: string
        default: '{"linux/amd64": "x64", "linux/arm64": "arm64"}'
      TAG_MASTER_AS_LATEST:
        description: 'If true, tag the image as latest if the branch is `master` or `main`'
        required: false
        type: boolean
        default: true
      TAG_ALL_AS_LATEST:
        description: "If true, tag the image as latest no matter what branch we're on"
        required: false
        type: boolean
        default: false
      TAG_AS_BRANCH_NAME:
        description: 'Whether to tag the image as the branch name'
        required: false
        type: boolean
        default: true
    outputs:
      image_tags:
        description: 'The tags of the image that was built as a stringified JSON array'
        value: ${{ jobs.build_manifest.outputs.TAG_LIST }}
      image_sha_tag:
        description: 'The SHA tag of the image that was built'
        value: ${{ jobs.setup.outputs.image_sha }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for GHA Build Container
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.ACTIONS_BUILD_CONTAINER_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_BUILD_CONTAINER_ECR_SECRET_ACCESS_KEY }}
          role-session-name: '${{ github.event.repository.name }}-GithubActions-build.yml'
          mask-aws-account-id: false

      - name: Login to Amazon ECR for GHA Build Container
        id: login-gha-build-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Calculate Platforms
        id: calculate-platforms
        run: |
          PLATFORMS=$(echo ${{ inputs.PLATFORMS }} | jq -Rc 'split(",")') 
          echo result=$PLATFORMS >> "$GITHUB_OUTPUT"

      - name: Generate Final Metadata
        id: metadata
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ inputs.AWS_ECR_REPOSITORY }}
          tags: |
            # Rather than using type=schedule which only creates a tag on a schedule, we want date tags on every build
            type=raw,value={{date 'YYYYMMDD'}}${{ inputs.TAG_SUFFIX }}
            # refs
            type=ref,event=branch,enable=${{ inputs.TAG_AS_BRANCH_NAME }},suffix=${{ inputs.TAG_SUFFIX }}
            type=ref,event=tag,suffix=${{ inputs.TAG_SUFFIX }}
            type=ref,event=pr,suffix=${{ inputs.TAG_SUFFIX }}
            # sha's
            type=sha,prefix=,suffix=${{ inputs.TAG_SUFFIX }}
            type=sha,prefix=,format=long,suffix=${{ inputs.TAG_SUFFIX }}
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ ((github.ref_name == 'master' || github.ref_name == 'main') && inputs.TAG_MASTER_AS_LATEST) || inputs.TAG_ALL_AS_LATEST}},suffix=${{ inputs.TAG_SUFFIX }}

      - name: Platform Metadata
        id: platform-metadata
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ inputs.AWS_ECR_REPOSITORY }}
          tags: |
            type=sha,prefix=,format=long,suffix=${{ inputs.TAG_SUFFIX }}

      - name: For Each Platform, Generate Metadata
        id: set
        run: |

          FINAL_IMAGE_TAGS=$(echo "${{ steps.metadata.outputs.tags }}" | tr '\n' ',')
          echo "FINAL_IMAGE_TAGS=$FINAL_IMAGE_TAGS" >> "$GITHUB_OUTPUT"

          platform_tag_prefix="${{ steps.platform-metadata.outputs.tags }}"

          PLATFORMS=${{ inputs.PLATFORMS }}
          MAPPING='${{ inputs.PLATFORM_TO_ARCH_MAP }}'

          for i in ${PLATFORMS//,/ }; do
            new_source_tag=$(echo "$MAPPING" | jq -r --arg platform "$i" --arg tag "$platform_tag_prefix" '.[$platform] | "\($tag)-\(.)"')
            if [ -z "$expected_source_tags" ]; then
              expected_source_tags="$new_source_tag"
            else
              expected_source_tags="$expected_source_tags,$new_source_tag"
            fi
          done

          echo "EXPECTED_SOURCE_TAGS=$expected_source_tags" >> "$GITHUB_OUTPUT"

    outputs:
      registry: ${{ steps.login-this-ecr.outputs.registry }}
      gha_build_container_docker_username: ${{ steps.login-gha-build-ecr.outputs.docker_username_099538280162_dkr_ecr_eu_west_2_amazonaws_com }}
      gha_build_container_docker_password: ${{ steps.login-gha-build-ecr.outputs.docker_password_099538280162_dkr_ecr_eu_west_2_amazonaws_com }}
      platforms: ${{ steps.calculate-platforms.outputs.result }}
      metadata: ${{ toJson(steps.metadata.outputs) }}
      final_image_tags: ${{ steps.set.outputs.FINAL_IMAGE_TAGS }}
      expected_source_tags: ${{ steps.set.outputs.EXPECTED_SOURCE_TAGS }}
      image_sha: ${{ fromJSON(steps.platform-metadata.outputs.json).tags[0] }}

  build:
    name: Build Container
    needs: setup
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup.outputs.platforms) }}
    runs-on:
      - self-hosted
      - ${{ fromJSON(inputs.PLATFORM_TO_ARCH_MAP)[matrix.platform] }}
    container:
      # This has to be hardcoded, it doesn't support using the output from the setup job
      image: 099538280162.dkr.ecr.eu-west-2.amazonaws.com/iea/shared/cr/gthb/ctns/cntnr/build:latest
      credentials:
        username: ${{ needs.setup.outputs.gha_build_container_docker_username }}
        password: ${{ needs.setup.outputs.gha_build_container_docker_password }}
    steps:
      # Technically we could just log in with our secret key/access key here for ECR but this also authenticates us to use S3
      #  as a cache location and upload artifacts, so it's required
      - name: Configure AWS credentials for this repository
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          role-session-name: '${{ github.event.repository.name }}-GithubActions-build_container.yml'
          mask-aws-account-id: false

      - name: Login to Amazon ECR for this repository
        id: login-this-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Platform metadata (${{ inputs.AWS_ECR_REPOSITORY }})
        id: metadata
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ inputs.AWS_ECR_REPOSITORY }}
          tags: |
            # As this build is for a specific platform, we need to add the platform to the tag
            type=sha,prefix=,format=long,suffix=${{ inputs.TAG_SUFFIX }}-${{ fromJSON(inputs.PLATFORM_TO_ARCH_MAP)[matrix.platform] }}

      - name: Build ${{ inputs.DOCKERFILE }}
        uses: ./.github/actions/build-and-push-container
        with:
          AWS_ECR_REPOSITORY: ${{ inputs.AWS_ECR_REPOSITORY }}
          PLATFORMS: ${{ matrix.platform }}
          DOCKERFILE: ${{ inputs.DOCKERFILE }}
          BUILD_CONTEXT: ${{ inputs.BUILD_CONTEXT }}
          BUILD_ARGS: ${{ inputs.BUILD_ARGS }}
          # ARTIFACTS: ${{ inputs.ARTIFACTS }}
          # GHA doesn't support passing objects as inputs, so we JSONify it and then parse it in the action
          METADATA: ${{ toJSON(steps.metadata.outputs) }}

  build_manifest:
    name: Create manifests & Tags
    outputs:
      TAG_LIST: ${{ steps.output_tags.outputs.TAG_LIST_ARRAY }}
    needs:
      - setup
      - build
    if: success()
    runs-on:
      - self-hosted
    container:
      image: 099538280162.dkr.ecr.eu-west-2.amazonaws.com/iea/shared/cr/gthb/ctns/cntnr/build:latest
      credentials:
        username: ${{ needs.setup.outputs.gha_build_container_docker_username }}
        password: ${{ needs.setup.outputs.gha_build_container_docker_password }}
    steps:
      - name: Configure AWS credentials for this repository
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          role-session-name: '${{ github.event.repository.name }}-GithubActions-build_container.yml'
          mask-aws-account-id: false

      - name: Login to Amazon ECR for this repository
        id: login-this-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: ${{ needs.setup.outputs.final_image_tags }}
          images: ${{ needs.setup.outputs.expected_source_tags }}
          amend: true
          push: true

      - name: Output tags
        shell: bash
        id: output_tags
        run: |
          tags=$(echo '${{ needs.setup.outputs.final_image_tags }}')
          echo 'Built container `${{inputs.DOCKERFILE}}` and uploaded to `${{inputs.AWS_ECR_REPOSITORY}}` for platforms `${{inputs.PLATFORMS}}` under tags:' | tee -a $GITHUB_STEP_SUMMARY
          IFS=','; for tag in $tags; do
            echo '- `'"${prefix}${tag}"'`' | tee -a $GITHUB_STEP_SUMMARY
          done
          TAG_LIST_ARRAY=$(echo "$tags" | jq -c --raw-input --slurp 'split(",") | map(select(. != ""))')
          echo "TAG_LIST_ARRAY=$TAG_LIST_ARRAY" >> $GITHUB_OUTPUT
